#!/bin/bash
# Created by Kai Pazdzewicz
# Reworked a old script 19.05.2018

# VARS
CPUINFO="/proc/cpuinfo"
RAMINFO="/proc/meminfo"
LOAD="/proc/loadavg"
DF="$(which df)"
IP="$(which ip)"
SCREEN="$(which screen)"
MDADM="$(which mdadm)"
MDSTAT="/proc/mdstat"
MYSQLADM="$(which mysqladmin)"
MYSQL="$(which mysql)"
MYSQLD="$(which mysqld)"
BIRDC="$(which birdc)"
BIRDC6="$(which birdc6)"
VARNISHADM="$(which varnishadm)"
QM="$(which qm)"
NGINX="$(which nginx)"
PHP56="$(which php-fpm5.6)"
PHP70="$(which php-fpm7.0)"
PHP72="$(which php-fpm7.2)"
RECURSOR="$(which pdns_recursor)"
DNSD="$(which pdns_server)"
DNSADM="$(which pdns_control)"
NFSSTAT="$(which nfsstat)"
UPTIME="$(which uptime)"

# FUNCTIONS
function cpuinfo {
  MANUFACTURER=$(cat "$CPUINFO" | grep "model name" | uniq | cut -d':' -f2 | cut -d'@' -f1 | xargs)
  CORES=$(cat "$CPUINFO" | awk '/processor/' | wc -l)
  SPEED=$(cat "$CPUINFO" | awk '/cpu MHz/' | cut -d':' -f2 | uniq | xargs | awk '{print int($1)}')
  LOAD=$(cat "$LOAD" | awk '{ print $1,$2,$3}')
  UPTIME=$($UPTIME | cut -d',' -f1,2)
  echo -e "===\tCPU INFO\t==="
  echo -e "CPU:\t$MANUFACTURER($CORES x $SPEED MHz)"
  echo -e "Load:\t$LOAD"
  echo -e "Up:\t$UPTIME"
}
function raminfo {
  TOTALRAM=$(cat "$RAMINFO" | awk '/MemTotal/ {print int($2/1024)}')
  FREERAM=$(cat "$RAMINFO" | awk '/MemFree/ {print int($2/1024)}')
  USEDRAM=$(expr $TOTALRAM - $FREERAM)
  echo -e "\n===\tRAM INFO\t==="
  echo -e "$USEDRAM MB / $TOTALRAM MB"
}
function ipinfo {
  IPS=$(ip -o addr | grep -v "127.0.0.1" | grep -v "::1/128" | grep -v "fe80::" | awk '{printf "%s\t\t\t%s\n",$2,$4}')
  echo -e "\n===\tIPs INFO\t==="
  echo "IP Adressen:"
  echo "$IPS"
}
function partinfo {
  echo -e "\n===\tHDD INFO\t==="
  for MOUNT in $($DF| awk '{if (NR!=1) {print $6}}')
  do
    USED=$($DF -h | grep "$MOUNT$" | awk '{print $3}')
    TOTAL=$($DF -h | grep "$MOUNT$" | awk '{print $2}')
    PERC=$($DF | grep "$MOUNT$" | awk '{print $5}' | cut -d'%' -f1)
    if [ "$PERC" -gt "80" ]
    then
      if [ "$PERC" -gt "90" ]
      then
        echo -e "$USED\t/ $TOTAL\t\e[31m$PERC%\e[0m\t\e[1m$MOUNT\e[0m"
      else
        echo -e "$USED\t/ $TOTAL\t\e[33m$PERC%\e[0m\t\e[1m$MOUNT\e[0m"
      fi
    else
      echo -e "$USED\t/ $TOTAL\t\e[32m$PERC%\e[0m\t\e[1m$MOUNT\e[0m"
    fi
  done
}
function raidinfo {
  echo -e "\n===\tRAID INFO\t==="
  for MDEV in $($MDADM --examine --brief --scan  --config=partitions | awk '{print $2}')
  do
    RAIDSTATUS="$($MDADM --detail $MDEV | awk '$1 ~ /State/' | cut -d':' -f2 | xargs)"
    TYPE="$($MDADM --detail $MDEV | grep "Raid Level" | cut -d':' -f2 | xargs)"
    if [[ "$RAIDSTATUS" == *"degraded"* ]]
    then
      if [[ "$RAIDSTATUS" == *"recovering"* ]]
      then
        RECOVERY=$(cat $MDSTAT | awk '/recovery/')
        echo -e "\e[31m$MDEV ($TYPE) - $RAIDSTATUS: $RECOVERY\e[0m"
      else
        FAULTY="$(mdadm --detail $MDEV | awk '/faulty/ {printf("%s (%s)", $6,$5)}')"
        echo -e "\e[31m$MDEV ($TYPE) - $RAIDSTATUS: $FAULTY\e[0m"
      fi
    else
      echo -e "\e[32m$MDEV ($TYPE) - $RAIDSTATUS\e[0m"
    fi
  done
}
function proxmox {
  echo -e "\n===\tPROXMOX\t==="
  for VM in $($QM list | awk '{if (NR!=1) {print $1}}')
  do
    NAME="$($QM config $VM | awk '/name:/ {print $2}')"
    STATUS="$($QM status $VM | awk '{print $2}')"
    if [ "$STATUS" == "running" ]
    then
      echo -e "\e[32m$VM $NAME ($STATUS)\e[0m"
    else
      echo -e "\e[31m$VM $NAME ($STATUS)\e[0m"
    fi
  done
}
function varnish {
  echo -e "\n===\tVARNISH\t==="
  $VARNISHADM backend.list -p
}
function birdc {
  echo -e "\n===\tBGP IPv4\t==="
  for PEER in $($BIRDC show protocol | awk '$2 ~ /BGP/ {print $1}')
  do
    STATE="$($BIRDC show protocols all $PEER | grep "BGP state:" | awk '{print $3}')"
    ROUTES="$($BIRDC show protocols all $PEER | awk '/Routes:/' | cut -d ':' -f2 | xargs)"
    AS="$($BIRDC show protocols all $PEER | awk '/AS:/ {print $3}')"
    IP="$($BIRDC show protocols all $PEER | awk '/address/ && /Neighbor/ {print $3}')"
    if [[ "$STATE" == "Established" ]]
    then
      echo -e "\e[32m$AS\t$IP\t$PEER ($STATE)\t$ROUTES\e[0m"
    else
      if [[ "$STATE" == "Down" ]]
      then
        echo -e "\e[33m$AS\t$IP\t$PEER ($STATE)\e[0m"
      else
        ERROR="$($BIRDC show protocols all $PEER | awk '/error:/' | cut -d':' -f2- | xargs)"
        echo -e "\e[31m$AS\t$IP\t$PEER ($STATE)\t$ERROR\e[0m"
      fi
    fi
  done
}
function birdc6 {
  echo -e "\n===\tBGP IPv6\t==="
  for PEER in $($BIRDC6 show protocol | awk '$2 ~ /BGP/ {print $1}')
  do
    STATE="$($BIRDC6 show protocols all $PEER | grep "BGP state:" | awk '{print $3}')"
    ROUTES="$($BIRDC6 show protocols all $PEER | awk '/Routes:/' | cut -d ':' -f2 | xargs)"
    AS="$($BIRDC6 show protocols all $PEER | awk '/AS:/ {print $3}')"
    IP="$($BIRDC6 show protocols all $PEER | awk '/address/ && /Neighbor/ {print $3}')"
    if [[ "$STATE" == "Established" ]]
    then
      echo -e "\e[32m$AS\t$IP\t$PEER ($STATE)\t$ROUTES\e[0m"
    else
      if [[ "$STATE" == "Down" ]]
      then
        echo -e "\e[33m$AS\t$IP\t$PEER ($STATE)\e[0m"
      else
        ERROR="$($BIRDC6 show protocols all $PEER | awk '/error:/' | cut -d':' -f2- | xargs)"
        echo -e "\e[31m$AS\t$IP\t$PEER ($STATE)\t$ERROR\e[0m"
      fi
    fi
  done
}
function screeninfo {
  echo -e "\n===\tSCREEN INFO\t==="
  SCREENINFO=$($SCREEN -ls | grep "[0-9]." | grep -v "Socket" | wc -l)
  echo -e "Screen Sessions:\t$SCREENINFO"
}
function mysqlinfo {
  echo -e "\n===\tMySQL Info\t==="
  $MYSQLADM proc
  $MYSQLADM status
  DBS=$(mysql -u root -e "show databases;" | grep -v "Database" | wc -l)
  echo -e "Databases:\t$DBS"
}
function serviceinfo {
  echo -e "\n===\tSERVICES\t==="
  for SERVICE in $(systemctl list-unit-files | awk '/\.service/ && /enabled/ {print $1}' | sed 's/\.service//g' | grep -v '@')
  do
    STATUS="$(systemctl status $SERVICE.service | awk '/Active:/ {print $2}')"
    if [[ "$STATUS" == "active" ]]
    then
      echo -e "\e[32m$STATUS\e[0m:\t\t$SERVICE"
    else
      echo -e "\e[31m$STATUS\e[0m:\t$SERVICE"
   fi
  done
}
function powerdns {
  VERSION="$($DNSADM version)"
  echo -e "\n===\tPOWERDNS $VERSION Info\t==="
  ZONECOUNT="$($DNSADM list-zones | awk '/zonecount:/{print $2}' | cut -d':' -f2)"
  echo -e "Zones:\t$ZONECOUNT"
  UPTIME="$($DNSADM uptime)"
  echo -e "Uptime:\t$UPTIME"
  QUERIES="$($DNSADM ccounts)"
  echo -e "$QUERIES"
}

function nfsstatistic {
  echo -e "\n===\tNFS INFO\t==="
  CONNECTIONS=$(ss -m | awk '/nfs/ {print $6}')
  if [[ "$CONNECTIONS" == "" ]]
  then
    echo -e "Connections:\t0"
  else
    echo -e "Connections:\t$(echo "$CONNECTIONS" | wc -l)"
    EXPORTS="/etc/exports"
    if [ -f "$EXPORTS" ]
    then
      echo -e "Clients:\t"$CONNECTIONS
      EXPORTS=$(cat "$EXPORTS" | grep -v '#' | awk '{print $1}' | wc -l)
      echo -e "Exports:\t\t$EXPORTS"
    else
      echo -e "Server:\t\t"$CONNECTIONS
    fi
  fi
}

# MAIN ROUTINE
cpuinfo
raminfo
ipinfo
partinfo
if [ -n "$MDADM" ]
then
  raidinfo
fi
if [ -n "$QM" ]
then
  proxmox
fi
if [ -n "$VARNISHADM" ]
then
  varnish
fi
if [ -n "$BIRDC" ]
then
  birdc
fi
if [ -n "$BIRDC6" ]
then
  birdc6
fi
if [ -n "$MYSQLD" ]
then
  mysqlinfo
fi
if [ -n "$DNSD" ]
then
  powerdns
fi
if [ -n "$NFSSTAT" ]
then
  nfsstatistic
fi
if [ -n "$SCREEN" ]
then
  screeninfo
fi
if [ "$1" == "-services" ]
then
  serviceinfo
fi
